package view;

import java.io.IOException;
import java.util.LinkedList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import static javax.swing.WindowConstants.DISPOSE_ON_CLOSE;
import model.FileOrganizer;
import model.Map;
import model.Neuron;

/**
 *
 * @author kiko
 */
public class AdvancedTest extends javax.swing.JFrame {

    private String path;
    private Map map;
    private double[][] mTest;
    private Neuron[] winner;
    private LinkedList<Integer> malignant = new LinkedList<Integer>();
    private LinkedList<Integer> benign = new LinkedList<Integer>();
            
    /**
     * Creates new form AdvancedTest
     */
    public AdvancedTest() {
        initComponents();
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        jTextFieldTrain.setEditable(false);
        jTextFieldTest.setEditable(false);
        //jTextFieldTrain.setText("/home/kiko/NetBeansProjects/Kohonen/Breast Cancer Wisconsin/treino.txt");
        //jTextFieldTest.setText("/home/kiko/NetBeansProjects/Kohonen/Breast Cancer Wisconsin/teste.txt");
        jTextFieldTrain.setText("/home/someone/NetBeansProjects/Kohonen/Breast Cancer Wisconsin (Original)/treino.txt");
        jTextFieldTest.setText("/home/someone/NetBeansProjects/Kohonen/Breast Cancer Wisconsin (Original)/teste.txt");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButtonAdvancedTest = new javax.swing.JButton();
        jTextFieldExecutions = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldInitialSize = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldFinalSize = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldTrain = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jButtonTrain = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jTextFieldTest = new javax.swing.JTextField();
        jButtonTest = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jButtonAdvancedTest.setText("Start advanced test");
        jButtonAdvancedTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAdvancedTestActionPerformed(evt);
            }
        });

        jLabel5.setText("Executions by topology:");

        jLabel2.setText("From size");

        jLabel3.setText("to");

        jLabel4.setText("(size n = map n x n)");

        jLabel1.setText("Topologies to consider");

        jLabel6.setText("File train");

        jButtonTrain.setText("Browse");
        jButtonTrain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTrainActionPerformed(evt);
            }
        });

        jLabel7.setText("File test");

        jButtonTest.setText("Browse");
        jButtonTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTestActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextFieldExecutions, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addGap(8, 8, 8)
                                        .addComponent(jTextFieldTest)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonTest)
                                .addGap(19, 19, 19)
                                .addComponent(jButtonAdvancedTest))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextFieldInitialSize, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextFieldFinalSize, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel4)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(6, 6, 6)
                        .addComponent(jTextFieldTrain)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonTrain)
                        .addGap(165, 165, 165))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldInitialSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jTextFieldFinalSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextFieldExecutions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jTextFieldTrain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonTrain))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jTextFieldTest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonTest)
                    .addComponent(jButtonAdvancedTest))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "Topology", "tpRate", "fpRate", "Deviation (tpRate)", "Deviation (fpRate)"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 726, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAdvancedTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAdvancedTestActionPerformed
        int numTopologies = 1 + Integer.parseInt(jTextFieldFinalSize.getText()) - Integer.parseInt(jTextFieldInitialSize.getText());
        int count = 0;
        int numExec = Integer.parseInt(jTextFieldExecutions.getText());
        System.out.println("Numero de topologias: " + numTopologies);
        String[][] bodyTable = new String[numTopologies][5];
        for (int x = Integer.parseInt(jTextFieldInitialSize.getText()); x <= Integer.parseInt(jTextFieldFinalSize.getText()); x++) {//Para cada nova topologia
            float tpRateAverage = 0, fpRateAverage = 0;
            int count1 = 0;
            double[] desvioTpRate = new double[numExec];
            double[] desvioFpRate = new double[numExec];
            double desvioTp = 0;
            double desvioFp = 0;
            for (int y = 0; y < numExec; y++) {//Para cada execução/ Para cada novo mapa
                map = newMap(x);
                
                malignant = new LinkedList<Integer>();
                benign = new LinkedList<Integer>();
                
                if (jTextFieldTest.getText() != null) {
                    try {
                        mTest = FileOrganizer.fileToMatrix(jTextFieldTest.getText(), ",");
                    } catch (IOException e) {
                        System.out.println("Erro ao tentar carregar arquivo para matriz");
                    }

                    int[] aux1 = new int[winner.length * winner.length];
                    int[] aux2 = new int[winner.length * winner.length];
                    String[][] matrix = new String[mTest.length][2];
                    for (int i = 0; i < mTest.length; i++) {
                        if (i < 72) {
                            aux1[map.defineWinner(mTest[i]).getName()]++;
                        } else {
                            aux2[map.defineWinner(mTest[i]).getName()]++;
                        }
                    }
                    for (int i = 0; i < aux1.length; i++) {
                        if (aux1[i] > aux2[i]) {
                            malignant.add(i);
                        } else {
                            benign.add(i);
                        }
                    }
                    int falsosNegativos = 0;
                    int falsosPositivos = 0;
                    for (int i = 0; i < mTest.length; i++) {
                        if (malignant.contains(map.defineWinner(mTest[i]).getName())) {
                            matrix[i][0] = "" + i;
                            matrix[i][1] = "MALIGNA";
                        } else if (benign.contains(map.defineWinner(mTest[i]).getName())) {
                            matrix[i][0] = "" + i;
                            matrix[i][1] = "BENIGNA";
                        } else {
                            matrix[i][0] = "" + i;
                            matrix[i][1] = "ERRO";
                        }
                        if (i < 72 && matrix[i][1].equals("BENIGNA")) {
                            falsosNegativos++;
                        } else if (i >= 72 && matrix[i][1].equals("MALIGNA")) {
                            falsosPositivos++;
                        }
                    }
                    float fpRate, tpRate;
                    tpRate = (72f - falsosNegativos) / 72f;
                    fpRate = (falsosPositivos) / 133f;
                    desvioTpRate[y] = tpRate;
                    desvioFpRate[y] = fpRate;
                    count1++;
                    tpRateAverage = tpRateAverage + tpRate;
                    fpRateAverage = fpRateAverage + fpRate;
                    System.out.println("Topologia " + count);
                    System.out.println("Execucao " + count1);
                    System.out.println("Falsos negativos: " + falsosNegativos);
                    System.out.println("Falsos positivos: " + falsosPositivos);
                    System.out.println("tpRate: " + tpRate);
                    System.out.println("fpRate: " + fpRate + "\n");
                }
            }
            tpRateAverage = tpRateAverage / numExec;
            fpRateAverage = fpRateAverage / numExec;
            for (int m = 0; m < numExec; m++) {
                desvioTpRate[m] = Math.pow(desvioTpRate[m] - tpRateAverage, 2);
                desvioFpRate[m] = Math.pow(desvioFpRate[m] - fpRateAverage, 2);
                desvioTp = desvioTp + desvioTpRate[m];
                desvioFp = desvioFp + desvioFpRate[m];
            }
            desvioTp = Math.sqrt(desvioTp / numTopologies);
            desvioFp = Math.sqrt(desvioFp / numTopologies);
            System.out.println("COUNTER: " + count);
            System.out.println("desvioTp: " + desvioTp);
            System.out.println("desvioFp: " + desvioFp);
            bodyTable[count][0] = x + " x " + x;
            bodyTable[count][1] = tpRateAverage + "";
            bodyTable[count][2] = fpRateAverage + "";
            bodyTable[count][3] = desvioTp + "";
            bodyTable[count][4] = desvioFp + "";
            count++;
        }
        setTable(bodyTable);
    }//GEN-LAST:event_jButtonAdvancedTestActionPerformed

    private void jButtonTrainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTrainActionPerformed
        JFileChooser chooser = new JFileChooser();
        String aux;
        int retorno = chooser.showSaveDialog(null);
        if (retorno == JFileChooser.APPROVE_OPTION){
            aux = chooser.getSelectedFile().getAbsolutePath();
            jTextFieldTrain.setText(aux);
        }
    }//GEN-LAST:event_jButtonTrainActionPerformed

    private void jButtonTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTestActionPerformed
        JFileChooser chooser = new JFileChooser();
        String aux;
        int retorno = chooser.showSaveDialog(null);
        if (retorno == JFileChooser.APPROVE_OPTION){
            aux = chooser.getSelectedFile().getAbsolutePath();
            jTextFieldTest.setText(aux);
        }
    }//GEN-LAST:event_jButtonTestActionPerformed

    private void setTable(String[][] body) {
        String[] title = {
            "Topology", "tpRate", "fpRate", "Deviation (tpRate)", "Deviation (fpRate)"
        };
        jTable1.setModel(new javax.swing.table.DefaultTableModel(body, title));
    }
    
    private Map newMap(int size) {
        Map mapa = new Map(size, size);
        double[][] weightWinner;
        String diretorio;
        if (jTextFieldTrain.getText() != null) {
            diretorio = jTextFieldTrain.getText();
            try {
                winner = mapa.train(diretorio, ",");
                
                weightWinner = new double[winner.length][winner[0].getWeight().length];
                int count = 0;
                int numNeurons = mapa.getSize() * mapa.getSize();
                int[] aux1 = new int[numNeurons];
                int[] aux2 = new int[numNeurons];
                for (int i = 0; i < numNeurons; i++) {
                    aux1[i] = 0;
                    aux2[i] = 0;
                }
                for (int i = 0; i < winner.length; i++) {
                    weightWinner[i] = winner[i].getWeight();
                    //System.out.println("WINNER: " + winner[i].getName());
                    if (count < 167) {
                        aux1[winner[i].getName()]++;
                    } else {
                        aux2[winner[i].getName()]++;
                    }
                    count++;
                }
                for (int i = 0; i < numNeurons; i++) {
                    if (aux1[i] > aux2[i]) {
                        malignant.add(i);
                    } else {
                        benign.add(i);
                    }
                }
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, "Erro na leitura do arquivo de treino!", "", 0);
            } catch (NullPointerException e) {
                JOptionPane.showMessageDialog(null, "Nenhum mapa encontrado!", "", 2);
            } catch (ArrayIndexOutOfBoundsException e) {
                JOptionPane.showMessageDialog(null, "Número de amostras/atributos diferente do especificado!", "", 0);
            }
        }
        return mapa;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAdvancedTest;
    private javax.swing.JButton jButtonTest;
    private javax.swing.JButton jButtonTrain;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextFieldExecutions;
    private javax.swing.JTextField jTextFieldFinalSize;
    private javax.swing.JTextField jTextFieldInitialSize;
    private javax.swing.JTextField jTextFieldTest;
    private javax.swing.JTextField jTextFieldTrain;
    // End of variables declaration//GEN-END:variables
}
